<html>
<head>
<title>Typesetting Problem Info Page</title>
</head>
<body>
      <h2>The Typesetting Problem</h2>


      <p>The problem is to typeset a paragraph of justified text.  Think of the paragraph as an ordered collection of n words,
n > 0, W = {w<sub>1</sub>, w<sub>2</sub>, ..., w<sub>n</sub>}.  The goal is to partition the words into lines of text of
an appropriate size.  Each word is separated from the next by some amount of space.  By stretching or compressing the space 
between words, the lefthand and rightend ends of each line can be lined up.  For presentation purposes it is best if the amount
of stretching and compressing is minimum.
</p>
	<p> Let L = {l<sub>1</sub>, l<sub>2</sub>, ..., l<sub>n</sub>} where each l<sub>j</sub> is the length of the word w<sub>j</sub>.
&nbsp;&nbsp;Let Llen represent the desired line length.&nbsp;&nbsp; W<sub>i</sub><sub>,</sub><sub>j</sub> represents the sequence of words {w<sub>i</sub>, w<sub>i+1</sub>, ..., w<sub>j</sub>}.
&nbsp;&nbsp;Similarly L<sub>i</sub><sub>,</sub><sub>j</sub> = l<sub>i</sub> + ... + l<sub>j</sub>.<br />
</p>
<p>The recursive definition for L is given by<br />
<pre>
	L(i, j) = l<sub>i</sub>			if i = j
	L(i, j) = L(i, j-1) + l<sub>j</sub>     	if i < j
</pre>
<p>The "natural length" of a line containing W<sub>i</sub><sub>,</sub><sub>j</sub> is given by L(i,j) + (j-i)*spc, where spc
is the desired space between words.  When a word set is placed on a line of the paragraph it may need to be stretched or compressed to
contain Llen spaces. The amount of this stretching or compressing is given by<br />
<center> Llen - L(i,j) - (j-i)*spc.  </center><br />If the computed value is negative, then the text needs to be compressed. If L(i,j) > Llen, then it is impossible to typeset the
sequence of words on a single line.  
</p>

<p>To capture the size of the misfit M<sub>i</sub><sub>,</sub><sub>j</sub> is defined.  It measures the amount of stretching or compressing
that needs to be done to typeset the line containing the words i through j inclusive.

<p />
<p>The definition for M is given by<br />
<pre>
	M(i, j) = | Llen - L(i,j) - (j-i)*spc |		if Llen >= L(i, j)
	M(i, j) = infinity     				if Llen < L(i, j)
</pre>
<br />
Notice that for i > j, there are no computations made since these sequence of words are empty.
<p>To finalize the formulation of this problem, there needs to be a minimization performed over all ways to partition the sequence of words into lines - a minimum misfit
value needs to be computed.
<pre>
	C(i, j) = M(i,j)						if i = j
	C(i, j) = min { M(i, j), min<sub>k</sub> { M(i, k) + C(k+1, j) }		otherwise
where k = i, ..., j-1.
</pre>
</p>
<p>Unlike the text editing and the longest common subsequence problems, the number of values from which the minimum value is computed
is not fixed (three and two, respectively) for the aforementioned problems.
</p>
<h3>Comments on the visualization</h3>
<p>The visualization was designed to work with the word lengths [10, 10, 10, 12, 50] with Llen = 60 and s = 2.  For any choice of parameters 
are chosen you might need to move the window content a bit and
use the zoom in feature to see the visualization in its entirety as well as the messages at the bottom of the window.</p>

<p>The visualization intially displays the recursive call tree for the problem.  The first stage of the visualization displays the misfit matrix 
M[][] fully computed followed by the matrix C[[][] with its diagonal values initialized to the values of the diagonal of the matrix M. Below the diagonal for
both the matrix M and the matrix C all values are null indicating no subproblem exists for these entries since the word sequences always have i <= j.  </p>

<p>C, the dynamic programming matrix for this problem is filled column by column starting in column 1 by computing the value for the cell in the row immediately above the diagonal.  For
each entry the subproblems considered are highlighted in the same color.  Other than the darker blue cell in M[][], an entries from M[][] and C[][] which are identically colored are added 
together; the smallest of the darker blue cell value and the sums is selected as the entry for C[][].  For example, the entry for C[2][3] is the 
smaller of M[2][3] and the sum M[2][2] + C[3][3] - that is, the space costs for the subproblem [2, 3] and the subproblems [2, 2] and [3, 3]. Similarly, the entry for C[0][3] is the smaller 
of M[0][3], M[0][0] + C[1][3] (colored light blue), M[0][1] + C[2][3] (colored light red), and M[0][2] + C[3][3] (colored pink).
</p>
<p> In the problem with the parameters given above, the minimum amount of space required to typeset the words, 26.  The solution is contained in C[0][4] (the indices indicate there are five words) and is colored red after C[][] is completely filled.
</P>
<p> To find the words which make up the lines that will be typeset- the algorithm first retrieves the minimum length which it finds in C[0][l.length-1].  This is the first subproblem to tackle.  The visualization
searches for a pair of subproblems for which C[0][i] + C[i+1][l.length-1] = C[0][l.length-1].  The visualization checks pairs of subproblems for i = 0, 1, ... until a pair is located or it is
determined that none exist that satisfy the required condition; in the latter case the current subproblem is a line in the optimal solution.  To determine if a subproblem C[t][s] is a line or multiple lines the value of L[t][s] <= Llen or not respectively.
The visualization colors the cells for the subproblems yellow and indicates the result of the computation.  It then uses audio to announce whether a line is found or whether additional subproblems
need to be solved. When this portion of the visualization completes all subproblems that yield lines in an optimal solution are displayed in yellow - the value in the cell indicates the amount of space
required for stretching or compressing for each such line.
</p>
</body>
</html>
