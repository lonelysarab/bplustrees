<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">
	<TITLE>Red-black Tree Visualization </TITLE>
</HEAD>

<BODY BGCOLOR="#FFFF99">

<P>Here you will watch a succession of nodes being added to a
red-black search tree. The order of arrival of data for the tree is
indicated at the top of the snapshot, with the datum currently being
added set off by asterisks.  

A red circular node indicates that the node is pointed to by a red pointer, and a black circular node indicates
that the node is pointed to by a black pointer. Remember that the rules for adding new values to a red-black tree
are as follows:

<OL>
<LH>
</LH>
	<LI>Create a new node n to hold the value,
	<LI>If the tree is empty, make n the root,
	<LI>Otherwise, go left or right, as with normal insertion in a binary search tree, except that if you pass through
	a node m with red links to both of its children -- color those links black and,if m is not the root, color m's
	parent link red.
	<LI>Finally, at the appropriate leaf, add n as a child with a red link to its parent.
</OL>

<P>If either step that adds red links (3 or 4) causes there to be 2 red links in a row, rotate the associated nodes
to create a node with 2 red links to its children.

<P>When a new node is inserted, you will occasionally see a node's color change to yellow.  This is to indicate
that the yellow node is currently being visited on the insertion path for the new node.  If &quot;show question mode&quot;
is on, you will be asked a question about whether the highlighted node will change.  &quot;Change&quot; here refers
to the relative positioning of the highlighted node in the the red-black tree.  If you answer
that the highlighted node will change, try to predict the exact nature of  that change will be before clicking
the &quot;next snapshot&quot; icon.</P>

<p>
If the datum set off by asterisks is
already in the tree, the excursion down a path in the tree should be
viewed as a &quot;find&quot; operation instead of an
&quot;insert&quot;.  As the algorithm travels down the search path
during a find operation, if it will perform "re-balancing" operations
if it encounters a tree node that requires such operations.

</BODY>

</HTML>
