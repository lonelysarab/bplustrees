exercise=content.exercises.Prim
task=<span class="task"/>\n<p>Apply the algorithm to the following weighted graph (represented as an adjacency list beside the graphical representation) to construct the minimum spanning tree of the graph. The spanning tree is already initialized with the root vertex A, and thus does not contain the edge (A.father, A). </p>\n<span class="code" name="MST-Prim"/>\n<p>MST-Prim(G,root) // G = (V,E,W)<br>&nbsp;&nbsp;1 &nbsp;&nbsp;<b>for each</b> u in V<br>&nbsp;&nbsp;2 &nbsp;&nbsp;&nbsp;&nbsp;<b>do</b> u.priority = MAX_VALUE<br>&nbsp;&nbsp;3 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.unvisited = TRUE<br>&nbsp;&nbsp;4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.father = NULL<br>&nbsp;&nbsp;5 &nbsp;&nbsp;root.priority = 0 // root in V<br>&nbsp;&nbsp;6 &nbsp;&nbsp;Q.Insert(root); // Priority Queue Q<br>&nbsp;&nbsp;7 &nbsp;&nbsp;<b>while</b> Q not empty<br>&nbsp;&nbsp;8 &nbsp;&nbsp;&nbsp;&nbsp;<b>do</b> u = DeleteMin(Q)<br>&nbsp;&nbsp;9 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.unvisited = FALSE<br>10 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add edge (u.father, u) into the spanning tree<br>11 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for each</b> (u,v) in E<br>12 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>do if</b> v.unvisited <b>and</b> W(u,v) &lt; v.priority<br>13 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>then</b> v.father = u<br>14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.priority = W(u,v)<br>15 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q.InsertOrUpdate(v)<br></p>\n<span class="instructions"/>\n<p>In this exercise you can only click edges, i.e., apply the algorithm by adding edges to the spanning tree in correct order. The color of the spanning tree is red.</p>