<?xml version="1.0"?>
<pseudocode>
  <stack><replace var="current_function" /></stack>
  <code>
    <signature>Pseudocode</signature>
    <line num="1"> split(Node currentNode) {</line>
    <line num="2" indent="1"> medianIndex = (int) Math.floor(((double) keyList.length) / 2.0)</line>
    <line num="3" indent="1"> if (currentNode.getChild() == null) { //split leaf</line>
    <line num="4" indent="2"> newLeafNode = new TreeNode("")</line>
    <line num="5" indent="2"> for (int i = medianIndex; i &lt; keyList.length; i++) </line>
    <line num="6" indent="3"> addKeyToNode(newLeafNode, removeKeyAtIndex(currentNode, medianIndex))</line>
    <line num="7" indent="2"> if (currentNode.getParent() == null) {</line>
    <line num="8" indent="3"> newParentNode = new TreeNode()</line>
    <line num="9" indent="3"> root = newParentNode</line>
    <line num="10" indent="3">newParentNode.addChild(currentNode)</line>
    <line num="11" indent="3">newParentNode.addChild(newLeafNode)</line>
    <line num="12" indent="3">newParentNode.setKey(newLeafNode.getKey(0))</line>
    <line num="13" indent="2">} else // A parent exist.</line>
    <line num="14" indent="2">{</line>
    <line num="15" indent="3">newLeafNode.setSibling(currentNode.getSibling())</line>
    <line num="16" indent="3">newLeafNode.setParent(currentNode.getParent())</line>
    <line num="17" indent="3">currentNode.setSibling(newLeafNode)</line>
    <line num="18" indent="3">addKeyToNode(currentNode.getParent(), newLeafNode.getKey(0))</line>
    <line num="19" indent="3">parentKeyList = currentNode.getParent().getKeys</line>
    <line num="20" indent="3">if (parentKeyList.length == ORDER)</line>
    <line num="21" indent="4">split(currentNode.getParent())</line>
    <line num="22" indent="2">}</line>
    <line num="23" indent="1"></line>
    <line num="24" indent="1">} else //Split a node.</line>
    <line num="25" indent="1">{</line>
    <line num="26" indent="2">newNode = new TreeNode();</line>
    <line num="27" indent="2">for (int i = medianIndex; i &lt; keyList.length; i++) {</line>
    <line num="28" indent="3">addKeyToNode(newNode, removeKeyAtIndex(currentNode, medianIndex))</line>
    <line num="29" indent="3">tempNodePointer = currentNode.getChild()</line>
    <line num="30" indent="3">previousNode = null</line>
    <line num="31" indent="3">for (int j = 0; j &lt; medianIndex + 1; j++) {</line>
    <line num="32" indent="4">previousNode = tempNodePointer</line>
    <line num="33" indent="4">tempNodePointer = tempNodePointer.getSibling()</line>
    <line num="34" indent="3">}</line>
    <line num="35" indent="3">previousNode.setSibling(tempNodePointer.getSibling())</line>
    <line num="36" indent="3">tempNodePointer.setSibling(null)</line>
    <line num="37" indent="3">tempNodePointer.deactivate()</line>
    <line num="38" indent="3">newNode.addChild(tempNodePointer)</line>
    <line num="39" indent="2">}</line>
    <line num="40" indent="2">tempKeyForTheParent = removeKeyAtIndex(newNode, 0)</line>
    <line num="51" indent="2">if (currentNode.getParent() == null) { //new root</line>
    <line num="52" indent="3">newParentNode = new TreeNode()</line>
    <line num="53" indent="3">root = newParent</line>
    <line num="54" indent="3">newParentNode.setKey(tempKeyForTheParent)</line>
    <line num="55" indent="3">newParentNode.setChild(currentNode)</line>
    <line num="56" indent="3">newParentNode.setChild(newNode)</line>
    <line num="57" indent="2">} else //a parent already exist</line>
    <line num="58" indent="2">{</line>
    <line num="59" indent="3">newNode.setSibling(currentNode.getSibling())</line>
    <line num="60" indent="3">newNode.setParent(currentNode.getParent())</line>
    <line num="61" indent="3">currentNode.setSibling(newNode)</line>
    <line num="62" indent="3">addKeyToNode(currentNode.getParent(), tempKeyForTheParent)</line>
    <line num="63" indent="3">parentKeyList = currentNode.getParent().getKeys</line>
    <line num="64" indent="3">if (parentKeyList.length == ORDER)</line>
    <line num="65" indent="4">split(currentNode.getParent())</line>
    <line num="66" indent="2">}</line>
    <line num="67" indent="1">}</line>
    <line num="68" indent="1">return //successfully inserted</line>
    <line num="69">}</line>
  </code>
  <vars><var>x = <replace var="x" /></var></vars>
</pseudocode>
