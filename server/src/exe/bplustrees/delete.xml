<?xml version="1.0"?>
<pseudocode>
  <stack><replace var="current_function" /></stack>
  <code>
    <signature>Pseudocode</signature>
    <line num="1"> delete(key) {</line>
    <line num="2" indent="1"> currentNode = root</line>
    <line num="3" indent="1"> if (currentNode.getValue() == null) </line>
    <line num="4" indent="2"> return false</line>
    <line num="5" indent="1"> else {</line>
    <line num="6" indent="2"> currentNode = findLeafContainingKey(currentNode, key)</line>
    <line num="7" indent="2"> if (currentNode.getParent() == null) //leaf is root</line>
    <line num="8" indent="2"> {</line>
    <line num="9" indent="3"> if (currentNode.getKeys.contains(key))</line>
    <line num="10" indent="4">currentNode.removeKey(key)</line>
    <line num="11" indent="3">else</line>
    <line num="12" indent="4">return false</line>
    <line num="13" indent="3">if (currentNode.getKeys.length == 0)</line>
    <line num="14" indent="4">currentNode.setKeys(null)</line>
    <line num="15" indent="2">}</line>
    <line num="16" indent="2">else if (isKeyInList(currentNode.getKeys, key))</line>
    <line num="17" indent="2">{</line>
    <line num="18" indent="3">index = findIndex(currentNode, key)</line>
    <line num="19" indent="3">removeKeyAtIndex(currentNode, index)</line>
    <line num="20" indent="3">numOfKeysInTheLeaf //declare a variable for couting keys</line>
    <line num="21" indent="3">if (currentNode.getKeys.length == 0) </line>
    <line num="22" indent="4">numOfKeysInTheLeaf = 0</line>
    <line num="23" indent="3">else</line>
    <line num="24" indent="4">numOfKeysInTheLeaf = currentNode.getKeys.length</line>
    <line num="25" indent="3">if (numOfKeysInTheLeaf &lt; MINIMUM_CAPACITY)</line>
    <line num="26" indent="3">{</line>
    <line num="27" indent="4">if (currentNode.getParent() == null AND numOfKeysInTheLeaf == 0)</line>
    <line num="28" indent="5">currentNode.setValue(null)</line>
    <line num="29" indent="4">else if (currentNode.getParent() == null)</line>
    <line num="30" indent="4">{</line>
    <line num="31" indent="5">if (currentNode.getKeys.contains(key))</line>
    <line num="32" indent="6">currentNode.getKeys.remove(key)</line>
    <line num="33" indent="5">else</line>
    <line num="34" indent="6">return false</line>
    <line num="35" indent="5">if (currentNode.getKeys.length == 0) </line>
    <line num="36" indent="6">currentNode.setKeys(null)</line>
    <line num="37" indent="4">}</line>
    <line num="38" indent="4">else</line>
    <line num="39" indent="4">{</line>
    <line num="40" indent="5">suitableNeighbor = searchForNeighbor(currentNode)</line>
    <line num="41" indent="5">numOfKeysInTheLeaf //declare a variable for couting keys</line>
    <line num="42" indent="5">if (suitableNeighbor != null) </line>
    <line num="43" indent="6">numKeysInNeighbor = suitableNeighbor.getKeys.length</line>
    <line num="44" indent="5">else</line>
    <line num="45" indent="6">numKeysInNeighbor = 0 //The root is a leaf.</line>
    <line num="46" indent="5">//REDISTRIBUTE</line>
    <line num="47" indent="5">if (numKeysInNeighbor > MINIMUM_CAPACITY)</line>
    <line num="48" indent="5">{</line>
    <line num="49" indent="6">suitableNeighborKeys = suitableNeighbor.getKeys</line>
    <line num="50" indent="6">currentNodeKeys = currentNode.getKeys</line>
    <line num="51" indent="6">//neighbor is on the left</line>
    <line num="52" indent="6">if (suitableNeighborKeys.getKey(0) &lt; currentNodeKeys.getKey(0)) {</line>
    <line num="53" indent="7">combinedKeys = suitableNeighbor.getKeys() + currentNode.getKeys()</line>
    <line num="54" indent="7">listOfCombinedKeys = combinedKeys</line>
    <line num="55" indent="7">medianIndex = (int)Math.floor(((double) combinedKeys.length)/2.0)</line>
    <line num="56" indent="7">suitableNeighbor.removeAllKeys()</line>
    <line num="57" indent="7">currentNode.removeAllKeys()</line>
    <line num="58" indent="7">for (int i = 0; i &lt; listOfCombinedKeys.length; i++) {</line>
    <line num="59" indent="8">if (i &lt; medianIndex) </line>
    <line num="60" indent="9">addKeyToNode(suitableNeighbor, listOfCombinedKeys.getKey(i))</line>
    <line num="61" indent="8">else</line>
    <line num="62" indent="9">addKeyToNode(currentNode, listOfCombinedKeys(i))</line>
    <line num="63" indent="7">}</line>
    <line num="64" indent="6">}</line>
    <line num="65" indent="6">else //Neighbor was on the right</line>
    <line num="66" indent="6">{</line>
    <line num="67" indent="7">combinedKeys = currentNode.getKeys()+suitableNeighbor.getKeys()</line>
    <line num="68" indent="7">listOfCombinedKeys = combinedKeys.getKeys</line>
    <line num="69" indent="7">medianIndex=(int)Math.floor(((double)combinedKeys.length)/2.0)</line>
    <line num="70" indent="7">suitableNeighbor.removeAllKeys()</line>
    <line num="71" indent="7">currentNode.removeAllKeys()</line>
    <line num="72" indent="7">for (int i = 0; i &lt; listOfCombinedKeys.length; i++) {</line>
    <line num="73" indent="8">if (i &lt; medianIndex) </line>
    <line num="74" indent="9">addKeyToNode(currentNode, listOfCombinedKeys.getKey(i))</line>
    <line num="75" indent="8">else</line>
    <line num="76" indent="9">addKeyToNode(suitableNeighbor, listOfCombinedKey.getKey(i))</line>
    <line num="77" indent="7">}</line>
    <line num="78" indent="6">}</line>
    <line num="79" indent="6">fixKeys(currentNode.getParent())</line>
    <line num="80" indent="5">} else //DELETE LEAF</line>
    <line num="81" indent="5">{</line>
    <line num="82" indent="6">if (currentNode.getParent().getKeys.length &lt; MINIMUM_CAPACITY)</line>
    <line num="83" indent="6">{</line>
    <line num="84" indent="7">if (currentNode.getParent().getParent() == null)</line>
    <line num="85" indent="7">{</line>
    <line num="86" indent="8">newParentNode=new TreeNode()</line>
    <line num="87" indent="8">newParentKeys=currentNode.getParent().getChild().getKeys+currentNode.getParent().getChild().getSibling().getKeys</line>
    <line num="88" indent="8">newParentNode.setParent(null)</line>
    <line num="89" indent="8">root = newParentNode</line>
    <line num="90" indent="8">newParentNode.setKeys(newParentKeys)</line>
    <line num="91" indent="7">}</line>
    <line num="92" indent="7">else //nodes must have 2 children. tree needs to be restructured</line>
    <line num="93" indent="7">{</line>
    <line num="94" indent="8">restructure(currentNode)</line>
    <line num="95" indent="7">}</line>
    <line num="96" indent="6">} else //After deleting leaf, there is at least 1 key in parent.</line>
    <line num="97" indent="6">{</line>
    <line num="98" indent="7">deleteLeaf(currentNode)</line>
    <line num="99" indent="6">}</line>
    <line num="100" indent="5">}</line>
    <line num="101" indent="4">}</line>
    <line num="102" indent="3">}</line>
    <line num="103" indent="2">} else //key is not in the leaf</line>
    <line num="104" indent="2">{</line>
    <line num="105" indent="3">return false</line>
    <line num="106" indent="2">}</line>
    <line num="107" indent="1">}</line>
    <line num="108" indent="1">return true</line>
    <line num="109">}</line>
  </code>
  <vars><var>x = <replace var="x" /></var></vars>
</pseudocode>
